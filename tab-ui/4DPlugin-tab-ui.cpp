/* -------------------------------------------------------------------------------- # #  4DPlugin-tab-ui.cpp #	source generated by 4D Plugin Wizard #	Project : tab-ui #	author : miyako #	2019/07/02 #   # --------------------------------------------------------------------------------*/#include "4DPlugin-tab-ui.h"#pragma mark -void PluginMain(PA_long32 selector, PA_PluginParameters params) {    	try	{        switch(selector)        {			// --- tab-ui#ifdef __LP64__            case 1 :                TOGGLE_WINDOW_TAB_OVERVIEW(params);                break;            case 2 :                Get_window_tab_id(params);                break;            case 3 :                SET_WINDOW_TAB_ID(params);                break;            case 4 :                TOGGLE_WINDOW_TAB_BAR(params);                break;            case 5 :                MERGE_ALL_WINDOWS(params);                break;            case 6 :                SELECT_NEXT_WINDOW_TAB(params);                break;            case 7 :                SELECT_PREVIOUS_WINDOW_TAB(params);                break;#endif        }	}	catch(...)	{	}}#pragma mark -#import <Cocoa/Cocoa.h>@interface FormController : NSObject- (void)toggleTabOverview:(NSWindow *)window;- (void)mergeAllWindows:(NSWindow *)window;- (void)selectNextTab:(NSWindow *)window;- (void)selectPreviousTab:(NSWindow *)window;- (void)toggleTabBar:(NSWindow *)window;@end@implementation FormController- (void)toggleTabOverview:(NSWindow *)window{    if (@available(macOS 10.13, *)) {//        [NSThread sleepForTimeInterval:0.9f];        [window performSelectorOnMainThread:@selector(toggleTabOverview:)                                 withObject:nil waitUntilDone:YES];    }}- (void)mergeAllWindows:(NSWindow *)window{    if (@available(macOS 10.12, *)) {        [window performSelectorOnMainThread:@selector(mergeAllWindows:)                                 withObject:nil waitUntilDone:YES];    }}- (void)selectNextTab:(NSWindow *)window{    if (@available(macOS 10.12, *)) {        [window performSelectorOnMainThread:@selector(selectNextTab:)                                 withObject:nil waitUntilDone:YES];    }}- (void)selectPreviousTab:(NSWindow *)window{    if (@available(macOS 10.12, *)) {        [window performSelectorOnMainThread:@selector(selectPreviousTab:)                                 withObject:nil waitUntilDone:YES];    }}- (void)toggleTabBar:(NSWindow *)window{    if (@available(macOS 10.12, *)) {        [window performSelectorOnMainThread:@selector(toggleTabBar:)                                 withObject:nil waitUntilDone:YES];    }}@endvoid Get_window_tab_id(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));    NSString *tabbingIdentifier = [window tabbingIdentifier];            NSUInteger len = [tabbingIdentifier length];        std::vector<uint8_t> buf((len+1) * sizeof(PA_Unichar));        [tabbingIdentifier getCharacters:(UniChar *)&buf[0]];        PA_ReturnString(params, (PA_Unichar *)&buf[0]);}void SET_WINDOW_TAB_ID(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    PA_Unistring *windowTabIdentifier = PA_GetStringParameter(params, 2);    PA_long32 windowTabbingMode = PA_GetLongParameter(params, 3);        NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));    if(windowTabIdentifier->fLength)    {        NSString *tabbingIdentifier = [[NSString alloc]initWithCharacters:windowTabIdentifier->fString length:windowTabIdentifier->fLength];        [window setTabbingIdentifier:tabbingIdentifier];        if(windowTabbingMode)        {            [window setTabbingMode:NSWindowTabbingModePreferred];        }else{            [window setTabbingMode:NSWindowTabbingModeAutomatic];        }        [tabbingIdentifier release];    }else    {        [window setTabbingIdentifier:@""];        [window setTabbingMode:NSWindowTabbingModeDisallowed];    }        NSString *tabbingIdentifier = [window tabbingIdentifier];        NSUInteger len = [tabbingIdentifier length];    std::vector<uint8_t> buf((len+1) * sizeof(PA_Unichar));    [tabbingIdentifier getCharacters:(UniChar *)&buf[0]];}void TOGGLE_WINDOW_TAB_OVERVIEW(PA_PluginParameters params) {    PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));    @autoreleasepool {        FormController *controller = [[[FormController alloc]init]autorelease];        NSThread *thread = [[[NSThread alloc]initWithTarget:controller selector:@selector(toggleTabOverview:)                                                     object:window]autorelease];        [thread setThreadPriority:1];        [thread start];    }}void TOGGLE_WINDOW_TAB_BAR(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));        @autoreleasepool {        FormController *controller = [[[FormController alloc]init]autorelease];        NSThread *thread = [[[NSThread alloc]initWithTarget:controller selector:@selector(toggleTabBar:)                                                     object:window]autorelease];        [thread setThreadPriority:1];        [thread start];    }}void MERGE_ALL_WINDOWS(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));        @autoreleasepool {        FormController *controller = [[[FormController alloc]init]autorelease];        NSThread *thread = [[[NSThread alloc]initWithTarget:controller selector:@selector(mergeAllWindows:)                                                     object:window]autorelease];        [thread setThreadPriority:1];        [thread start];    }}void SELECT_NEXT_WINDOW_TAB(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));        @autoreleasepool {        FormController *controller = [[[FormController alloc]init]autorelease];        NSThread *thread = [[[NSThread alloc]initWithTarget:controller selector:@selector(selectNextTab:)                                                     object:window]autorelease];        [thread setThreadPriority:1];        [thread start];    }}void SELECT_PREVIOUS_WINDOW_TAB(PA_PluginParameters params) {        PA_long32 windowNumber = PA_GetLongParameter(params, 1);    NSWindow *window = (NSWindow *)PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(windowNumber));        @autoreleasepool {        FormController *controller = [[[FormController alloc]init]autorelease];        NSThread *thread = [[[NSThread alloc]initWithTarget:controller selector:@selector(selectPreviousTab:)                                                     object:window]autorelease];        [thread setThreadPriority:1];        [thread start];    }}